#!/usr/bin/env node

// Cargamos valores del fichero de entorno.
require('dotenv').config();

// Creamos el usuario administrador si la tabla está vacía.
// Perdón por la bandera :-)
const bcrypt = require('bcrypt');
const administradores = require('../models/administradores.model');
administradores.checkIsEmpty()
               .then( 
                (result) => {
                  if (result.isEmpty) {
                    administradores.create({
                      nombreCompleto: process.env.DEFAULT_ADMIN_NOMBRE_COMPLETO,
                      userName: process.env.DEFAULT_ADMIN_USERNAME,
                      email: process.env.DEFAULT_ADMIN_EMAIL,
                      password: bcrypt.hashSync(process.env.DEFAULT_ADMIN_PASSWORD, 8)
                    })
                    .then(
                      () => console.log('Creado administrador por defecto'),
                      () => console.log('Error al crear el administrador por defecto')
                    )
                  }
                },
                () => console.log('Error al comprobar si la tabla de administradores está vacía')
              );

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('teacherappback:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
